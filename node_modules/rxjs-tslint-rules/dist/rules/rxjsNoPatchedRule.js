"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var used_walker_1 = require("../support/used-walker");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        return this.applyWithWalker(new Walker(sourceFile, this.getOptions(), program));
    };
    Rule.metadata = {
        description: "Disallows the calling of patched methods.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: true,
        ruleName: "rxjs-no-patched",
        type: "functionality",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "RxJS patched methods are forbidden";
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
var Walker = (function (_super) {
    tslib_1.__extends(Walker, _super);
    function Walker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Walker.prototype.onSourceFileEnd = function () {
        var _this = this;
        Object.keys(this.usedObservables).forEach(function (key) {
            _this.usedObservables[key].forEach(function (node) { return _this.addFailureAtNode(node, Rule.FAILURE_STRING + ": " + key); });
        });
        Object.keys(this.usedOperators).forEach(function (key) {
            _this.usedOperators[key].forEach(function (node) { return _this.addFailureAtNode(node, Rule.FAILURE_STRING + ": " + key); });
        });
    };
    return Walker;
}(used_walker_1.UsedWalker));
