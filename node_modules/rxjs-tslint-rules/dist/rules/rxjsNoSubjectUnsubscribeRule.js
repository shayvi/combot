"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Lint = require("tslint");
var ts = require("typescript");
var util_1 = require("../support/util");
var Rule = (function (_super) {
    tslib_1.__extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.applyWithProgram = function (sourceFile, program) {
        return this.applyWithWalker(new Walker(sourceFile, this.getOptions(), program));
    };
    Rule.metadata = {
        description: "Disallows the calling of unsubscribe directly upon subject instances.",
        options: null,
        optionsDescription: "Not configurable.",
        requiresTypeInfo: true,
        ruleName: "rxjs-no-subject-unsubscribe",
        type: "functionality",
        typescriptOnly: true
    };
    Rule.FAILURE_STRING = "Calling unsubscribe on subjects is forbidden";
    return Rule;
}(Lint.Rules.TypedRule));
exports.Rule = Rule;
var Walker = (function (_super) {
    tslib_1.__extends(Walker, _super);
    function Walker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Walker.prototype.visitCallExpression = function (node) {
        var _this = this;
        node.forEachChild(function (child) {
            if (child.kind === ts.SyntaxKind.PropertyAccessExpression) {
                var propertyAccessExpression = child;
                var name_1 = propertyAccessExpression.name.getText();
                var typeChecker = _this.getTypeChecker();
                var type = typeChecker.getTypeAtLocation(propertyAccessExpression.expression);
                if ((name_1 === "unsubscribe") && util_1.isReferenceType(type) && util_1.couldBeType(type.target, "Subject")) {
                    _this.addFailureAtNode(propertyAccessExpression.name, Rule.FAILURE_STRING);
                }
            }
        });
        _super.prototype.visitCallExpression.call(this, node);
    };
    return Walker;
}(Lint.ProgramAwareRuleWalker));
exports.Walker = Walker;
